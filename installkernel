#!/bin/sh
# 
# Copyright (C) 1995 - 1998, Ian A. Murdock <imurdock@debian.org>
# Copyright (C) 1998, 1999, Guy Maor
# Copyright (C) 2002, Matthew Wilcox
# Copyright (C) 2002, 2004, 2005, 2007, 2009  Clint Adams
# Copyright (C) 2009  Manoj Srivasta
#
# Install the kernel on a Debian Linux system.
#
# This script is called from /usr/src/linux/arch/i386/boot/install.sh.
# If you install it as /sbin/installkernel, you can do a "make install"
# from a generic kernel source tree, and the image will be installed to
# the proper place for Debian GNU/Linux.

set -e

# Parse the command line options.  Of course, powerpc has to be all
# different, and passes in a fifth argument, just because it is
# "special". We ignore the fifth argument, and do not flag is as an
# error, which it would be for any arch apart from powerpc
if [ $# -eq 3 ] || [ $# -eq 4 ] || [ $# -eq 5 ] ; then
  img="$2"
  map="$3"
  ver="$1"
  if [ $# -ge 4 ] && [ -n "$4" ] ; then
      dir="$4"
  else
      dir="/boot"
  fi
else
  echo "Usage: installkernel <version> <image> <System.map> <directory>"
  exit 1
fi

# Create backups of older versions before installing
updatever () {
  if [ -f "$dir/$1-$ver" ] ; then
    mv "$dir/$1-$ver" "$dir/$1-$ver.old"
  fi

  cat "$2" > "$dir/$1-$ver"

  # This section is for backwards compatibility only
  if test -f "$dir/$1" ; then
    # The presence of "$dir/$1" is unusual in modern intallations, and
    # the results are mostly unused.  So only recreate them if they
    # already existed.
    if test -L "$dir/$1" ; then
        # If we were using links, continue to use links, updating if
        # we need to.
        if [ "$(readlink -f ${dir}/${1})" = "${dir}/${1}-${ver}" ]; then
            # Yup, we need to change
            ln -sf "$1-$ver.old" "$dir/$1.old"
        else
            mv "$dir/$1" "$dir/$1.old"
        fi
        ln -sf "$1-$ver" "$dir/$1"
    else                        # No links
        mv "$dir/$1" "$dir/$1.old"
        cat "$2" > "$dir/$1"
    fi
  fi
}

if [ "$(basename $img)" = "vmlinux" ] ; then
  img_dest=vmlinux
else
  img_dest=vmlinuz
fi
updatever $img_dest "$img"
updatever System.map "$map"

config=$(dirname "$map")
config="${config}/.config"
if [ -f "$config" ] ; then
  updatever config "$config"
fi

# use the same path as /usr/lib/kernel/install.d/50-dracut.install
# expects for best interoperability
initrd=$(dirname "$img")
initrd="${initrd}/initrd"
if [ -f "$initrd" ] ; then
  updatever initrd "$initrd"
fi

# If installing in the usual directory, run the same scripts that hook
# into kernel package installation.  Also make sure the PATH includes
# /usr/sbin and /sbin, just as dpkg would.
if [ "$dir" = "/boot" ]; then
  PATH="$PATH:/usr/sbin:/sbin" \
    run-parts --verbose --exit-on-error --arg="$ver" --arg="$dir/$img_dest-$ver" \
    /etc/kernel/postinst.d
fi  
echo "" ;
set +e
if [ $(grep CONFIG_EFI_STUB=y /usr/src/linux/.config) ] ; then
  echo "This kernel is configured as an EFI stub kernel." 
  if [ -z $(grep CONFIG_CMDLINE_BOOL=y /usr/src/linux/.config) ] ; then	 
    echo "Kernel is not configured with a builtin command line. Kernel boot options must be provided externally."
  else
    echo "The builtin command line is "$(grep CONFIG_CMDLINE= /usr/src/linux/.config)
  fi
  if [ -z $(grep CONFIG_CMDLINE_OVERRIDE=y /usr/src/linux/.config) ] ; then 
    echo "CONFIG_CMDLINE_OVERRIDE is not enabled. If external kernel boot options are provided they will prevail."
  else 
    echo "CONFIG_CMDLINE_OVERRIDE is enabled. If external kernel boot options are provided they will be ignored."
  fi
  echo "Attempting to copy EFI stub kernel to the EFI System Partition (ESP)."
else
  exit 0
fi
echo "" ;
set +e 
echo "Nominally, when the UEFI firmware runs, it looks for a FAT32 formatted partition identifiable as an EFI System Partition (ESP). If on a GPT labeled disk the ESP should have partition type (GUID) c12a7328-f81f-11d2-ba4b-00a0c93ec93b . If on an MSDOS labeled disk (not encouraged, GPT preferred) the ESP should have partition type EF00 . fdisk, gdisk, parted, gparted will report a variety of TYPE's or FLAG's that are human readable to convey the thought that a partition is an ESP. 
Searching for a FAT32 formatted partition of TYPE c12a7328-f81f-11d2-ba4b-00a0c93ec93b or TYPE EF00:"
n=$(lsblk -i -l -o name,partuuid,uuid,parttype,fstype,mountpoint | grep -i "vfat" | grep -ice "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" -ice "0xef" )
# echo $n" ESP found"
nm=$(lsblk -i -l -o name,partuuid,uuid,parttype,fstype,mountpoint | grep -i "vfat" | grep -ie "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" -ie "0xef" | awk '{ print $6 }' | wc -w )
# echo $nm" ESP mounted"
mp=$(lsblk -i -l -o name,partuuid,uuid,parttype,fstype,mountpoint | grep -i "vfat" | grep -ie "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" -ie "0xef" | awk '{ print $6 }')
# echo "Mount point "$mp
dn=$(lsblk -i -l -o name,partuuid,uuid,parttype,fstype,mountpoint | grep -i "vfat" | grep -ie "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" -ie "0xef" | awk '{ print "/dev/"$1,"PARTUUID="$2,"UUID="$3 }' )
#echo "dn "$dn
if [[ n -eq 0 ]] ; then
echo "No ESP found. Quitting."
exit 0
fi
if [[ nm -gt 1 ]] ; then
echo "Having more than one ESP mounted is too difficult a problem. Quitting."
exit 0
fi
if [[ n -gt 1 ]] ; then
echo "Having more than 1 ESP can be a problem when the UEFI goes looking for the 'right' ESP but settles for the first found. Suggest consolidation and elimination to one ESP when convenient."
fi
if [[ nm -eq 0 && n -eq 1 ]] ; then
echo "One ESP found but no ESP is mounted."
# gather device names of the ESP
dn1=$(echo "$dn" | awk '{ print $1 }')
dn2=$(echo "$dn" | awk '{ print $2 }')
dn3=$(echo "$dn" | awk '{ print $3 }')
#echo "checking for fat entries in fstab"
nef=$(grep -ic "fat" /etc/fstab)
# echo "Number of fat file system entries in /etc/fstab "$nef
# echo "looking for ESP device name in fstab"
    if [[ nef -gt 0 ]] ; then
      ef=$(grep -i "$dn1" /etc/fstab)$(grep -i "$dn2" /etc/fstab)$(grep -i "$dn3" /etc/fstab)
    echo "$ef" | awk '{ print "The ESP has device name "$1,"and has mount point "$2" in /etc/fstab. Mounting it." }'
      mp=$(echo "$ef" | awk '{ print $2 }' )
    else
      echo "No ESP device name found in /etc/fstab, mounting the ESP partition at /boot ."
      mkdir -p /boot
      mp="/boot"
    fi
mount "$dn2" "$mp" && nm=1    
fi
if [[ nm -eq 1 ]] ; then
echo "An ESP is mounted at $mp. Proceeding."
else
echo "No ESP was or could be mounted. Quitting"
exit 0
fi
#  echo "img_dest "$img_dest
#  echo "ver "$ver
   dir=$mp"/EFI/Gentoo"
#  echo "dir "$dir 
   name="vmlinuz-"$ver".efi"
#  echo "name "$name  
#  echo "path "$dir/$name
   name=$(echo $(readlink /usr/src/linux) | sed 's/linux/vmlinuz/g')".efi"
#  echo $name
if [[ -d $dir ]]	; then
  if [[ -e $dir"/"$name ]] ; then
    # echo $dir" exists"
    mv $dir"/"$name $dir"/"$name".old"
    cp "/usr/src/linux/"$img $dir"/"$name
  else
    cp "/usr/src/linux/"$img $dir"/"$name
  fi
fi
y=$(efibootmgr | grep -c vmlinuz)
# echo $y
if [[ y -gt 0 ]] ; then
  x=$( efibootmgr | grep vmlinuz | awk '{gsub("Boot",""); print}' | awk '{gsub("* vmlinuz",""); print}' )
  efibootmgr -b $x -B
fi  
efipath=$dir"/"$name
efipath="${efipath////\\}"
# echo $efipath
label="vmlinuz"  
efibootmgr -c -L "$label" -l $efipath

exit 0
